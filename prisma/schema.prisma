generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------------
// MODELS FOR NEXT-AUTH
// ------------------------------------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // You added this for CredentialsProvider.ts]
  accounts      Account[]
  sessions      Session[]
  decks         Deck[]
  studyLogs     StudyLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ------------------------------------
// MODELS FOR DECKS
// ------------------------------------
model Deck {
  id          String     @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards       Card[]
  studyLogs   StudyLog[]
}

model Card {
  id              String     @id @default(cuid())
  question        String
  answer          String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deckId          String
  deck            Deck       @relation(fields: [deckId], references: [id], onDelete: Cascade)
  studyLogs       StudyLog[]

  // Spaced Repetition Fields
  nextReviewDate  DateTime @default(now())
  interval        Float    @default(1)
  easeFactor      Float    @default(2.5)

  // Metacognitive Fields
  lastConfidence  Int?
  lastPerformance Int?
}

model StudyLog {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  confidence  Int
  performance Int
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  deckId      String
  deck        Deck     @relation(fields: [deckId], references: [id], onDelete: NoAction) // Avoids multiple cascade paths

  cardId      String
  card        Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
}